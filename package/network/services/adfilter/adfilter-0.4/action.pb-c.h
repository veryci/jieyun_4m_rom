/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: action.proto */

#ifndef PROTOBUF_C_action_2eproto__INCLUDED
#define PROTOBUF_C_action_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _HttpDataAction HttpDataAction;
typedef struct _HttpRedirectAction HttpRedirectAction;
typedef struct _HttpAction HttpAction;
typedef struct _HttpHeaderItem HttpHeaderItem;
typedef struct _HttpActionQuery HttpActionQuery;


/* --- enums --- */

typedef enum _ActionFlag {
  ACTION_FLAG__ActionNone = 1,
  ACTION_FLAG__ActionData = 2,
  ACTION_FLAG__ActionRedirect = 3,
  ACTION_FLAG__ActionReplaceRequest = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACTION_FLAG)
} ActionFlag;

/* --- messages --- */

struct  _HttpDataAction
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define HTTP_DATA_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_data_action__descriptor) \
    , {0,NULL} }


struct  _HttpRedirectAction
{
  ProtobufCMessage base;
  char *host;
  int32_t port;
  char *url;
  char *method;
  char *httpver;
  char *referer;
};
#define HTTP_REDIRECT_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_redirect_action__descriptor) \
    , NULL, 0, NULL, NULL, NULL, NULL }


struct  _HttpAction
{
  ProtobufCMessage base;
  ActionFlag action;
  HttpDataAction *data;
  HttpRedirectAction *redirect;
};
#define HTTP_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_action__descriptor) \
    , 0, NULL, NULL }


struct  _HttpHeaderItem
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define HTTP_HEADER_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_header_item__descriptor) \
    , NULL, NULL }


struct  _HttpActionQuery
{
  ProtobufCMessage base;
  char *userid;
  char *url;
  char *method;
  size_t n_headers;
  HttpHeaderItem **headers;
};
#define HTTP_ACTION_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&http_action_query__descriptor) \
    , NULL, NULL, NULL, 0,NULL }


/* HttpDataAction methods */
void   http_data_action__init
                     (HttpDataAction         *message);
size_t http_data_action__get_packed_size
                     (const HttpDataAction   *message);
size_t http_data_action__pack
                     (const HttpDataAction   *message,
                      uint8_t             *out);
size_t http_data_action__pack_to_buffer
                     (const HttpDataAction   *message,
                      ProtobufCBuffer     *buffer);
HttpDataAction *
       http_data_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_data_action__free_unpacked
                     (HttpDataAction *message,
                      ProtobufCAllocator *allocator);
/* HttpRedirectAction methods */
void   http_redirect_action__init
                     (HttpRedirectAction         *message);
size_t http_redirect_action__get_packed_size
                     (const HttpRedirectAction   *message);
size_t http_redirect_action__pack
                     (const HttpRedirectAction   *message,
                      uint8_t             *out);
size_t http_redirect_action__pack_to_buffer
                     (const HttpRedirectAction   *message,
                      ProtobufCBuffer     *buffer);
HttpRedirectAction *
       http_redirect_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_redirect_action__free_unpacked
                     (HttpRedirectAction *message,
                      ProtobufCAllocator *allocator);
/* HttpAction methods */
void   http_action__init
                     (HttpAction         *message);
size_t http_action__get_packed_size
                     (const HttpAction   *message);
size_t http_action__pack
                     (const HttpAction   *message,
                      uint8_t             *out);
size_t http_action__pack_to_buffer
                     (const HttpAction   *message,
                      ProtobufCBuffer     *buffer);
HttpAction *
       http_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_action__free_unpacked
                     (HttpAction *message,
                      ProtobufCAllocator *allocator);
/* HttpHeaderItem methods */
void   http_header_item__init
                     (HttpHeaderItem         *message);
size_t http_header_item__get_packed_size
                     (const HttpHeaderItem   *message);
size_t http_header_item__pack
                     (const HttpHeaderItem   *message,
                      uint8_t             *out);
size_t http_header_item__pack_to_buffer
                     (const HttpHeaderItem   *message,
                      ProtobufCBuffer     *buffer);
HttpHeaderItem *
       http_header_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_header_item__free_unpacked
                     (HttpHeaderItem *message,
                      ProtobufCAllocator *allocator);
/* HttpActionQuery methods */
void   http_action_query__init
                     (HttpActionQuery         *message);
size_t http_action_query__get_packed_size
                     (const HttpActionQuery   *message);
size_t http_action_query__pack
                     (const HttpActionQuery   *message,
                      uint8_t             *out);
size_t http_action_query__pack_to_buffer
                     (const HttpActionQuery   *message,
                      ProtobufCBuffer     *buffer);
HttpActionQuery *
       http_action_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   http_action_query__free_unpacked
                     (HttpActionQuery *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HttpDataAction_Closure)
                 (const HttpDataAction *message,
                  void *closure_data);
typedef void (*HttpRedirectAction_Closure)
                 (const HttpRedirectAction *message,
                  void *closure_data);
typedef void (*HttpAction_Closure)
                 (const HttpAction *message,
                  void *closure_data);
typedef void (*HttpHeaderItem_Closure)
                 (const HttpHeaderItem *message,
                  void *closure_data);
typedef void (*HttpActionQuery_Closure)
                 (const HttpActionQuery *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    action_flag__descriptor;
extern const ProtobufCMessageDescriptor http_data_action__descriptor;
extern const ProtobufCMessageDescriptor http_redirect_action__descriptor;
extern const ProtobufCMessageDescriptor http_action__descriptor;
extern const ProtobufCMessageDescriptor http_header_item__descriptor;
extern const ProtobufCMessageDescriptor http_action_query__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_action_2eproto__INCLUDED */
