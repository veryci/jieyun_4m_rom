/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: business.proto */

#ifndef PROTOBUF_C_business_2eproto__INCLUDED
#define PROTOBUF_C_business_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _BusinessRequest BusinessRequest;
typedef struct _Transparent302Target Transparent302Target;
typedef struct _Target Target;
typedef struct _Rule Rule;
typedef struct _RptRule RptRule;
typedef struct _FilterQuery FilterQuery;
typedef struct _FilterRet FilterRet;
typedef struct _ReportQuery ReportQuery;
typedef struct _HostRule HostRule;
typedef struct _BusinessTarget BusinessTarget;
typedef struct _BusinessCfg BusinessCfg;
typedef struct _UpdateInfo UpdateInfo;
typedef struct _TaskInfo TaskInfo;
typedef struct _BlogInfo BlogInfo;
typedef struct _HartBeatItem HartBeatItem;
typedef struct _HartBeatConfig HartBeatConfig;
typedef struct _UpdateConfig UpdateConfig;
typedef struct _BusinessResponse BusinessResponse;
typedef struct _ReportData ReportData;
typedef struct _TableActive TableActive;
typedef struct _TableCrash TableCrash;
typedef struct _TableTargetHit TableTargetHit;
typedef struct _TableRptHit TableRptHit;
typedef struct _TableAdfilterWatch TableAdfilterWatch;
typedef struct _TableClientFind TableClientFind;
typedef struct _TableUaFind TableUaFind;
typedef struct _TableWifiFind TableWifiFind;
typedef struct _TableIosWork TableIosWork;
typedef struct _FilterReportItem FilterReportItem;
typedef struct _FilterReport FilterReport;


/* --- enums --- */

typedef enum _DataOp {
  DATA_OP__KeepUpdateConfig = 1,
  DATA_OP__UpdateFilterConfig = 2,
  DATA_OP__DisableFilter = 3,
  DATA_OP__RunTask = 4,
  DATA_OP__UpdateHartBeat = 5,
  DATA_OP__UpdateFilter = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_OP)
} DataOp;

/* --- messages --- */

struct  _BusinessRequest
{
  ProtobufCMessage base;
  char *userid;
  protobuf_c_boolean has_memsize;
  int32_t memsize;
  int32_t curversion;
  char *channel;
  char *clientversion;
  char *rptversion;
};
#define BUSINESS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&business_request__descriptor) \
    , NULL, 0,0, 0, NULL, NULL, NULL }


struct  _Transparent302Target
{
  ProtobufCMessage base;
  char *host;
  int32_t port;
  char *url;
  char *method;
  char *httpver;
  char *referer;
};
#define TRANSPARENT302_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transparent302_target__descriptor) \
    , NULL, 0, NULL, NULL, NULL, NULL }


struct  _Target
{
  ProtobufCMessage base;
  int32_t targetid;
  int32_t dataversion;
  char *contenttype;
  char *content;
  protobuf_c_boolean has_keepalive;
  int32_t keepalive;
  size_t n_excludepath;
  char **excludepath;
  size_t n_excludepathstart;
  char **excludepathstart;
  size_t n_excludepathcontain;
  char **excludepathcontain;
  protobuf_c_boolean has_weight;
  int32_t weight;
  Transparent302Target *transtarget;
  char *encparam;
};
#define TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__descriptor) \
    , 0, 0, NULL, NULL, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, NULL, NULL }


struct  _Rule
{
  ProtobufCMessage base;
  int32_t ruleid;
  int32_t dataversion;
  int32_t businessid;
  char *pathstart;
  size_t n_pathcontains;
  char **pathcontains;
  char *pathstrict;
  size_t n_useragentcontains;
  char **useragentcontains;
  protobuf_c_boolean has_refererstatus;
  int32_t refererstatus;
  size_t n_referrercontains;
  char **referrercontains;
  size_t n_cookiecontains;
  char **cookiecontains;
  size_t n_denypathcontains;
  char **denypathcontains;
  size_t n_denyreferrercontains;
  char **denyreferrercontains;
  size_t n_denyuseragentcontains;
  char **denyuseragentcontains;
  size_t n_denycookiecontains;
  char **denycookiecontains;
  protobuf_c_boolean has_maxage;
  int32_t maxage;
  protobuf_c_boolean has_weight;
  int32_t weight;
  char *noparampathend;
};
#define RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rule__descriptor) \
    , 0, 0, 0, NULL, 0,NULL, NULL, 0,NULL, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, NULL }


struct  _RptRule
{
  ProtobufCMessage base;
  int32_t rptid;
  size_t n_hostcontains;
  char **hostcontains;
  char *pathstart;
  size_t n_pathcontains;
  char **pathcontains;
  char *pathstrict;
  size_t n_useragentcontains;
  char **useragentcontains;
  protobuf_c_boolean has_refererstatus;
  int32_t refererstatus;
  size_t n_referrercontains;
  char **referrercontains;
  size_t n_cookiecontains;
  char **cookiecontains;
  size_t n_denypathcontains;
  char **denypathcontains;
  size_t n_denyreferrercontains;
  char **denyreferrercontains;
  size_t n_denyuseragentcontains;
  char **denyuseragentcontains;
  size_t n_denycookiecontains;
  char **denycookiecontains;
  char *noparampathend;
  int32_t businessid;
};
#define RPT_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpt_rule__descriptor) \
    , 0, 0,NULL, NULL, 0,NULL, NULL, 0,NULL, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0 }


struct  _FilterQuery
{
  ProtobufCMessage base;
  char *userid;
  char *channel;
  char *endpointmac;
  char *wanip;
  char *connip;
  protobuf_c_boolean has_ruleid;
  int32_t ruleid;
  protobuf_c_boolean has_targetid;
  int32_t targetid;
  char *url;
  char *headers;
};
#define FILTER_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter_query__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, NULL, NULL }


struct  _FilterRet
{
  ProtobufCMessage base;
  char *status;
  BusinessTarget *targets;
};
#define FILTER_RET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter_ret__descriptor) \
    , NULL, NULL }


struct  _ReportQuery
{
  ProtobufCMessage base;
  char *userid;
  char *endpointmac;
  char *wanip;
  char *connip;
  protobuf_c_boolean has_rptid;
  int32_t rptid;
  char *url;
  char *headers;
  char *channel;
};
#define REPORT_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report_query__descriptor) \
    , NULL, NULL, NULL, NULL, 0,0, NULL, NULL, NULL }


struct  _HostRule
{
  ProtobufCMessage base;
  char *host;
  protobuf_c_boolean has_matchsub;
  int32_t matchsub;
  size_t n_rules;
  Rule **rules;
};
#define HOST_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&host_rule__descriptor) \
    , NULL, 0,0, 0,NULL }


struct  _BusinessTarget
{
  ProtobufCMessage base;
  int32_t businessid;
  char *targettype;
  size_t n_targets;
  Target **targets;
};
#define BUSINESS_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&business_target__descriptor) \
    , 0, NULL, 0,NULL }


struct  _BusinessCfg
{
  ProtobufCMessage base;
  int32_t version;
  size_t n_hostrules;
  HostRule **hostrules;
  size_t n_targets;
  BusinessTarget **targets;
  size_t n_rptrules;
  RptRule **rptrules;
};
#define BUSINESS_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&business_cfg__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL }


struct  _UpdateInfo
{
  ProtobufCMessage base;
  char *channel;
  char *newestver;
  TaskInfo *task;
};
#define UPDATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_info__descriptor) \
    , NULL, NULL, NULL }


struct  _TaskInfo
{
  ProtobufCMessage base;
  char *taskurl;
};
#define TASK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_info__descriptor) \
    , NULL }


struct  _BlogInfo
{
  ProtobufCMessage base;
  char *svrhost;
  int32_t svrport;
  char *cfgurl;
  char *method;
  char *begin;
  char *end;
  size_t n_point;
  char **point;
  char *zero;
};
#define BLOG_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blog_info__descriptor) \
    , NULL, 0, NULL, NULL, NULL, NULL, 0,NULL, NULL }


struct  _HartBeatItem
{
  ProtobufCMessage base;
  int32_t svrtype;
  int32_t nextlevelgap;
  int32_t successinterval;
  int32_t failinterval;
  char *svrip;
  int32_t svrport;
  char *cfgurl;
  char *method;
  BlogInfo *blogurl;
};
#define HART_BEAT_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hart_beat_item__descriptor) \
    , 0, 0, 0, 0, NULL, 0, NULL, NULL, NULL }


struct  _HartBeatConfig
{
  ProtobufCMessage base;
  size_t n_hartbeet;
  HartBeatItem **hartbeet;
};
#define HART_BEAT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hart_beat_config__descriptor) \
    , 0,NULL }


struct  _UpdateConfig
{
  ProtobufCMessage base;
  size_t n_cfg;
  UpdateInfo **cfg;
};
#define UPDATE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_config__descriptor) \
    , 0,NULL }


struct  _BusinessResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_status;
  int32_t status;
  char *msg;
  protobuf_c_boolean has_dataop;
  DataOp dataop;
  protobuf_c_boolean has_filtertimeout;
  int32_t filtertimeout;
  BusinessCfg *content;
  UpdateInfo *updateinfo;
  TaskInfo *taskinfo;
  HartBeatConfig *hartbeatinfo;
};
#define BUSINESS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&business_response__descriptor) \
    , 0,0, NULL, 0,0, 0,0, NULL, NULL, NULL, NULL }


struct  _ReportData
{
  ProtobufCMessage base;
  char *tbname;
  char *userid;
  char *channel;
  char *clientversion;
  char *wanip;
  char *clientaddr;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define REPORT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report_data__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, 0,{0,NULL} }


struct  _TableActive
{
  ProtobufCMessage base;
};
#define TABLE_ACTIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_active__descriptor) \
     }


struct  _TableCrash
{
  ProtobufCMessage base;
};
#define TABLE_CRASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_crash__descriptor) \
     }


struct  _TableTargetHit
{
  ProtobufCMessage base;
  char *url;
  char *endpointmac;
  char *endpointip;
  protobuf_c_boolean has_ruleid;
  int32_t ruleid;
  protobuf_c_boolean has_targetid;
  int32_t targetid;
  char *host;
  char *ua;
  char *referer;
};
#define TABLE_TARGET_HIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_target_hit__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, NULL, NULL, NULL }


struct  _TableRptHit
{
  ProtobufCMessage base;
  char *url;
  char *endpointmac;
  char *endpointip;
  protobuf_c_boolean has_rptid;
  int32_t rptid;
  char *host;
  char *ua;
  char *referer;
};
#define TABLE_RPT_HIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_rpt_hit__descriptor) \
    , NULL, NULL, NULL, 0,0, NULL, NULL, NULL }


struct  _TableAdfilterWatch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_memsize;
  int32_t memsize;
  protobuf_c_boolean has_crashcnt;
  int32_t crashcnt;
};
#define TABLE_ADFILTER_WATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_adfilter_watch__descriptor) \
    , 0,0, 0,0 }


struct  _TableClientFind
{
  ProtobufCMessage base;
  char *clientmac;
  char *clienttip;
  protobuf_c_boolean has_active;
  int32_t active;
};
#define TABLE_CLIENT_FIND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_client_find__descriptor) \
    , NULL, NULL, 0,0 }


struct  _TableUaFind
{
  ProtobufCMessage base;
  char *clientmac;
  char *clienttip;
  char *ua;
  char *url;
  char *host;
};
#define TABLE_UA_FIND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_ua_find__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _TableWifiFind
{
  ProtobufCMessage base;
  char *ssid;
  char *bssid;
};
#define TABLE_WIFI_FIND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_wifi_find__descriptor) \
    , NULL, NULL }


struct  _TableIosWork
{
  ProtobufCMessage base;
  int32_t status;
  char *guid;
  char *locations;
  char *workurl;
  char *endpointmac;
};
#define TABLE_IOS_WORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table_ios_work__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


struct  _FilterReportItem
{
  ProtobufCMessage base;
  int32_t ruleid;
  int32_t targetid;
  int32_t rulever;
  int32_t srcip;
  protobuf_c_boolean has_srdmac;
  ProtobufCBinaryData srdmac;
  protobuf_c_boolean has_uri;
  ProtobufCBinaryData uri;
  protobuf_c_boolean has_headers;
  ProtobufCBinaryData headers;
};
#define FILTER_REPORT_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter_report_item__descriptor) \
    , 0, 0, 0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _FilterReport
{
  ProtobufCMessage base;
  size_t n_items;
  FilterReportItem **items;
};
#define FILTER_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter_report__descriptor) \
    , 0,NULL }


/* BusinessRequest methods */
void   business_request__init
                     (BusinessRequest         *message);
size_t business_request__get_packed_size
                     (const BusinessRequest   *message);
size_t business_request__pack
                     (const BusinessRequest   *message,
                      uint8_t             *out);
size_t business_request__pack_to_buffer
                     (const BusinessRequest   *message,
                      ProtobufCBuffer     *buffer);
BusinessRequest *
       business_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   business_request__free_unpacked
                     (BusinessRequest *message,
                      ProtobufCAllocator *allocator);
/* Transparent302Target methods */
void   transparent302_target__init
                     (Transparent302Target         *message);
size_t transparent302_target__get_packed_size
                     (const Transparent302Target   *message);
size_t transparent302_target__pack
                     (const Transparent302Target   *message,
                      uint8_t             *out);
size_t transparent302_target__pack_to_buffer
                     (const Transparent302Target   *message,
                      ProtobufCBuffer     *buffer);
Transparent302Target *
       transparent302_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transparent302_target__free_unpacked
                     (Transparent302Target *message,
                      ProtobufCAllocator *allocator);
/* Target methods */
void   target__init
                     (Target         *message);
size_t target__get_packed_size
                     (const Target   *message);
size_t target__pack
                     (const Target   *message,
                      uint8_t             *out);
size_t target__pack_to_buffer
                     (const Target   *message,
                      ProtobufCBuffer     *buffer);
Target *
       target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   target__free_unpacked
                     (Target *message,
                      ProtobufCAllocator *allocator);
/* Rule methods */
void   rule__init
                     (Rule         *message);
size_t rule__get_packed_size
                     (const Rule   *message);
size_t rule__pack
                     (const Rule   *message,
                      uint8_t             *out);
size_t rule__pack_to_buffer
                     (const Rule   *message,
                      ProtobufCBuffer     *buffer);
Rule *
       rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rule__free_unpacked
                     (Rule *message,
                      ProtobufCAllocator *allocator);
/* RptRule methods */
void   rpt_rule__init
                     (RptRule         *message);
size_t rpt_rule__get_packed_size
                     (const RptRule   *message);
size_t rpt_rule__pack
                     (const RptRule   *message,
                      uint8_t             *out);
size_t rpt_rule__pack_to_buffer
                     (const RptRule   *message,
                      ProtobufCBuffer     *buffer);
RptRule *
       rpt_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpt_rule__free_unpacked
                     (RptRule *message,
                      ProtobufCAllocator *allocator);
/* FilterQuery methods */
void   filter_query__init
                     (FilterQuery         *message);
size_t filter_query__get_packed_size
                     (const FilterQuery   *message);
size_t filter_query__pack
                     (const FilterQuery   *message,
                      uint8_t             *out);
size_t filter_query__pack_to_buffer
                     (const FilterQuery   *message,
                      ProtobufCBuffer     *buffer);
FilterQuery *
       filter_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter_query__free_unpacked
                     (FilterQuery *message,
                      ProtobufCAllocator *allocator);
/* FilterRet methods */
void   filter_ret__init
                     (FilterRet         *message);
size_t filter_ret__get_packed_size
                     (const FilterRet   *message);
size_t filter_ret__pack
                     (const FilterRet   *message,
                      uint8_t             *out);
size_t filter_ret__pack_to_buffer
                     (const FilterRet   *message,
                      ProtobufCBuffer     *buffer);
FilterRet *
       filter_ret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter_ret__free_unpacked
                     (FilterRet *message,
                      ProtobufCAllocator *allocator);
/* ReportQuery methods */
void   report_query__init
                     (ReportQuery         *message);
size_t report_query__get_packed_size
                     (const ReportQuery   *message);
size_t report_query__pack
                     (const ReportQuery   *message,
                      uint8_t             *out);
size_t report_query__pack_to_buffer
                     (const ReportQuery   *message,
                      ProtobufCBuffer     *buffer);
ReportQuery *
       report_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report_query__free_unpacked
                     (ReportQuery *message,
                      ProtobufCAllocator *allocator);
/* HostRule methods */
void   host_rule__init
                     (HostRule         *message);
size_t host_rule__get_packed_size
                     (const HostRule   *message);
size_t host_rule__pack
                     (const HostRule   *message,
                      uint8_t             *out);
size_t host_rule__pack_to_buffer
                     (const HostRule   *message,
                      ProtobufCBuffer     *buffer);
HostRule *
       host_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   host_rule__free_unpacked
                     (HostRule *message,
                      ProtobufCAllocator *allocator);
/* BusinessTarget methods */
void   business_target__init
                     (BusinessTarget         *message);
size_t business_target__get_packed_size
                     (const BusinessTarget   *message);
size_t business_target__pack
                     (const BusinessTarget   *message,
                      uint8_t             *out);
size_t business_target__pack_to_buffer
                     (const BusinessTarget   *message,
                      ProtobufCBuffer     *buffer);
BusinessTarget *
       business_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   business_target__free_unpacked
                     (BusinessTarget *message,
                      ProtobufCAllocator *allocator);
/* BusinessCfg methods */
void   business_cfg__init
                     (BusinessCfg         *message);
size_t business_cfg__get_packed_size
                     (const BusinessCfg   *message);
size_t business_cfg__pack
                     (const BusinessCfg   *message,
                      uint8_t             *out);
size_t business_cfg__pack_to_buffer
                     (const BusinessCfg   *message,
                      ProtobufCBuffer     *buffer);
BusinessCfg *
       business_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   business_cfg__free_unpacked
                     (BusinessCfg *message,
                      ProtobufCAllocator *allocator);
/* UpdateInfo methods */
void   update_info__init
                     (UpdateInfo         *message);
size_t update_info__get_packed_size
                     (const UpdateInfo   *message);
size_t update_info__pack
                     (const UpdateInfo   *message,
                      uint8_t             *out);
size_t update_info__pack_to_buffer
                     (const UpdateInfo   *message,
                      ProtobufCBuffer     *buffer);
UpdateInfo *
       update_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_info__free_unpacked
                     (UpdateInfo *message,
                      ProtobufCAllocator *allocator);
/* TaskInfo methods */
void   task_info__init
                     (TaskInfo         *message);
size_t task_info__get_packed_size
                     (const TaskInfo   *message);
size_t task_info__pack
                     (const TaskInfo   *message,
                      uint8_t             *out);
size_t task_info__pack_to_buffer
                     (const TaskInfo   *message,
                      ProtobufCBuffer     *buffer);
TaskInfo *
       task_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_info__free_unpacked
                     (TaskInfo *message,
                      ProtobufCAllocator *allocator);
/* BlogInfo methods */
void   blog_info__init
                     (BlogInfo         *message);
size_t blog_info__get_packed_size
                     (const BlogInfo   *message);
size_t blog_info__pack
                     (const BlogInfo   *message,
                      uint8_t             *out);
size_t blog_info__pack_to_buffer
                     (const BlogInfo   *message,
                      ProtobufCBuffer     *buffer);
BlogInfo *
       blog_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blog_info__free_unpacked
                     (BlogInfo *message,
                      ProtobufCAllocator *allocator);
/* HartBeatItem methods */
void   hart_beat_item__init
                     (HartBeatItem         *message);
size_t hart_beat_item__get_packed_size
                     (const HartBeatItem   *message);
size_t hart_beat_item__pack
                     (const HartBeatItem   *message,
                      uint8_t             *out);
size_t hart_beat_item__pack_to_buffer
                     (const HartBeatItem   *message,
                      ProtobufCBuffer     *buffer);
HartBeatItem *
       hart_beat_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hart_beat_item__free_unpacked
                     (HartBeatItem *message,
                      ProtobufCAllocator *allocator);
/* HartBeatConfig methods */
void   hart_beat_config__init
                     (HartBeatConfig         *message);
size_t hart_beat_config__get_packed_size
                     (const HartBeatConfig   *message);
size_t hart_beat_config__pack
                     (const HartBeatConfig   *message,
                      uint8_t             *out);
size_t hart_beat_config__pack_to_buffer
                     (const HartBeatConfig   *message,
                      ProtobufCBuffer     *buffer);
HartBeatConfig *
       hart_beat_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hart_beat_config__free_unpacked
                     (HartBeatConfig *message,
                      ProtobufCAllocator *allocator);
/* UpdateConfig methods */
void   update_config__init
                     (UpdateConfig         *message);
size_t update_config__get_packed_size
                     (const UpdateConfig   *message);
size_t update_config__pack
                     (const UpdateConfig   *message,
                      uint8_t             *out);
size_t update_config__pack_to_buffer
                     (const UpdateConfig   *message,
                      ProtobufCBuffer     *buffer);
UpdateConfig *
       update_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_config__free_unpacked
                     (UpdateConfig *message,
                      ProtobufCAllocator *allocator);
/* BusinessResponse methods */
void   business_response__init
                     (BusinessResponse         *message);
size_t business_response__get_packed_size
                     (const BusinessResponse   *message);
size_t business_response__pack
                     (const BusinessResponse   *message,
                      uint8_t             *out);
size_t business_response__pack_to_buffer
                     (const BusinessResponse   *message,
                      ProtobufCBuffer     *buffer);
BusinessResponse *
       business_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   business_response__free_unpacked
                     (BusinessResponse *message,
                      ProtobufCAllocator *allocator);
/* ReportData methods */
void   report_data__init
                     (ReportData         *message);
size_t report_data__get_packed_size
                     (const ReportData   *message);
size_t report_data__pack
                     (const ReportData   *message,
                      uint8_t             *out);
size_t report_data__pack_to_buffer
                     (const ReportData   *message,
                      ProtobufCBuffer     *buffer);
ReportData *
       report_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report_data__free_unpacked
                     (ReportData *message,
                      ProtobufCAllocator *allocator);
/* TableActive methods */
void   table_active__init
                     (TableActive         *message);
size_t table_active__get_packed_size
                     (const TableActive   *message);
size_t table_active__pack
                     (const TableActive   *message,
                      uint8_t             *out);
size_t table_active__pack_to_buffer
                     (const TableActive   *message,
                      ProtobufCBuffer     *buffer);
TableActive *
       table_active__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_active__free_unpacked
                     (TableActive *message,
                      ProtobufCAllocator *allocator);
/* TableCrash methods */
void   table_crash__init
                     (TableCrash         *message);
size_t table_crash__get_packed_size
                     (const TableCrash   *message);
size_t table_crash__pack
                     (const TableCrash   *message,
                      uint8_t             *out);
size_t table_crash__pack_to_buffer
                     (const TableCrash   *message,
                      ProtobufCBuffer     *buffer);
TableCrash *
       table_crash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_crash__free_unpacked
                     (TableCrash *message,
                      ProtobufCAllocator *allocator);
/* TableTargetHit methods */
void   table_target_hit__init
                     (TableTargetHit         *message);
size_t table_target_hit__get_packed_size
                     (const TableTargetHit   *message);
size_t table_target_hit__pack
                     (const TableTargetHit   *message,
                      uint8_t             *out);
size_t table_target_hit__pack_to_buffer
                     (const TableTargetHit   *message,
                      ProtobufCBuffer     *buffer);
TableTargetHit *
       table_target_hit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_target_hit__free_unpacked
                     (TableTargetHit *message,
                      ProtobufCAllocator *allocator);
/* TableRptHit methods */
void   table_rpt_hit__init
                     (TableRptHit         *message);
size_t table_rpt_hit__get_packed_size
                     (const TableRptHit   *message);
size_t table_rpt_hit__pack
                     (const TableRptHit   *message,
                      uint8_t             *out);
size_t table_rpt_hit__pack_to_buffer
                     (const TableRptHit   *message,
                      ProtobufCBuffer     *buffer);
TableRptHit *
       table_rpt_hit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_rpt_hit__free_unpacked
                     (TableRptHit *message,
                      ProtobufCAllocator *allocator);
/* TableAdfilterWatch methods */
void   table_adfilter_watch__init
                     (TableAdfilterWatch         *message);
size_t table_adfilter_watch__get_packed_size
                     (const TableAdfilterWatch   *message);
size_t table_adfilter_watch__pack
                     (const TableAdfilterWatch   *message,
                      uint8_t             *out);
size_t table_adfilter_watch__pack_to_buffer
                     (const TableAdfilterWatch   *message,
                      ProtobufCBuffer     *buffer);
TableAdfilterWatch *
       table_adfilter_watch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_adfilter_watch__free_unpacked
                     (TableAdfilterWatch *message,
                      ProtobufCAllocator *allocator);
/* TableClientFind methods */
void   table_client_find__init
                     (TableClientFind         *message);
size_t table_client_find__get_packed_size
                     (const TableClientFind   *message);
size_t table_client_find__pack
                     (const TableClientFind   *message,
                      uint8_t             *out);
size_t table_client_find__pack_to_buffer
                     (const TableClientFind   *message,
                      ProtobufCBuffer     *buffer);
TableClientFind *
       table_client_find__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_client_find__free_unpacked
                     (TableClientFind *message,
                      ProtobufCAllocator *allocator);
/* TableUaFind methods */
void   table_ua_find__init
                     (TableUaFind         *message);
size_t table_ua_find__get_packed_size
                     (const TableUaFind   *message);
size_t table_ua_find__pack
                     (const TableUaFind   *message,
                      uint8_t             *out);
size_t table_ua_find__pack_to_buffer
                     (const TableUaFind   *message,
                      ProtobufCBuffer     *buffer);
TableUaFind *
       table_ua_find__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_ua_find__free_unpacked
                     (TableUaFind *message,
                      ProtobufCAllocator *allocator);
/* TableWifiFind methods */
void   table_wifi_find__init
                     (TableWifiFind         *message);
size_t table_wifi_find__get_packed_size
                     (const TableWifiFind   *message);
size_t table_wifi_find__pack
                     (const TableWifiFind   *message,
                      uint8_t             *out);
size_t table_wifi_find__pack_to_buffer
                     (const TableWifiFind   *message,
                      ProtobufCBuffer     *buffer);
TableWifiFind *
       table_wifi_find__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_wifi_find__free_unpacked
                     (TableWifiFind *message,
                      ProtobufCAllocator *allocator);
/* TableIosWork methods */
void   table_ios_work__init
                     (TableIosWork         *message);
size_t table_ios_work__get_packed_size
                     (const TableIosWork   *message);
size_t table_ios_work__pack
                     (const TableIosWork   *message,
                      uint8_t             *out);
size_t table_ios_work__pack_to_buffer
                     (const TableIosWork   *message,
                      ProtobufCBuffer     *buffer);
TableIosWork *
       table_ios_work__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table_ios_work__free_unpacked
                     (TableIosWork *message,
                      ProtobufCAllocator *allocator);
/* FilterReportItem methods */
void   filter_report_item__init
                     (FilterReportItem         *message);
size_t filter_report_item__get_packed_size
                     (const FilterReportItem   *message);
size_t filter_report_item__pack
                     (const FilterReportItem   *message,
                      uint8_t             *out);
size_t filter_report_item__pack_to_buffer
                     (const FilterReportItem   *message,
                      ProtobufCBuffer     *buffer);
FilterReportItem *
       filter_report_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter_report_item__free_unpacked
                     (FilterReportItem *message,
                      ProtobufCAllocator *allocator);
/* FilterReport methods */
void   filter_report__init
                     (FilterReport         *message);
size_t filter_report__get_packed_size
                     (const FilterReport   *message);
size_t filter_report__pack
                     (const FilterReport   *message,
                      uint8_t             *out);
size_t filter_report__pack_to_buffer
                     (const FilterReport   *message,
                      ProtobufCBuffer     *buffer);
FilterReport *
       filter_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter_report__free_unpacked
                     (FilterReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BusinessRequest_Closure)
                 (const BusinessRequest *message,
                  void *closure_data);
typedef void (*Transparent302Target_Closure)
                 (const Transparent302Target *message,
                  void *closure_data);
typedef void (*Target_Closure)
                 (const Target *message,
                  void *closure_data);
typedef void (*Rule_Closure)
                 (const Rule *message,
                  void *closure_data);
typedef void (*RptRule_Closure)
                 (const RptRule *message,
                  void *closure_data);
typedef void (*FilterQuery_Closure)
                 (const FilterQuery *message,
                  void *closure_data);
typedef void (*FilterRet_Closure)
                 (const FilterRet *message,
                  void *closure_data);
typedef void (*ReportQuery_Closure)
                 (const ReportQuery *message,
                  void *closure_data);
typedef void (*HostRule_Closure)
                 (const HostRule *message,
                  void *closure_data);
typedef void (*BusinessTarget_Closure)
                 (const BusinessTarget *message,
                  void *closure_data);
typedef void (*BusinessCfg_Closure)
                 (const BusinessCfg *message,
                  void *closure_data);
typedef void (*UpdateInfo_Closure)
                 (const UpdateInfo *message,
                  void *closure_data);
typedef void (*TaskInfo_Closure)
                 (const TaskInfo *message,
                  void *closure_data);
typedef void (*BlogInfo_Closure)
                 (const BlogInfo *message,
                  void *closure_data);
typedef void (*HartBeatItem_Closure)
                 (const HartBeatItem *message,
                  void *closure_data);
typedef void (*HartBeatConfig_Closure)
                 (const HartBeatConfig *message,
                  void *closure_data);
typedef void (*UpdateConfig_Closure)
                 (const UpdateConfig *message,
                  void *closure_data);
typedef void (*BusinessResponse_Closure)
                 (const BusinessResponse *message,
                  void *closure_data);
typedef void (*ReportData_Closure)
                 (const ReportData *message,
                  void *closure_data);
typedef void (*TableActive_Closure)
                 (const TableActive *message,
                  void *closure_data);
typedef void (*TableCrash_Closure)
                 (const TableCrash *message,
                  void *closure_data);
typedef void (*TableTargetHit_Closure)
                 (const TableTargetHit *message,
                  void *closure_data);
typedef void (*TableRptHit_Closure)
                 (const TableRptHit *message,
                  void *closure_data);
typedef void (*TableAdfilterWatch_Closure)
                 (const TableAdfilterWatch *message,
                  void *closure_data);
typedef void (*TableClientFind_Closure)
                 (const TableClientFind *message,
                  void *closure_data);
typedef void (*TableUaFind_Closure)
                 (const TableUaFind *message,
                  void *closure_data);
typedef void (*TableWifiFind_Closure)
                 (const TableWifiFind *message,
                  void *closure_data);
typedef void (*TableIosWork_Closure)
                 (const TableIosWork *message,
                  void *closure_data);
typedef void (*FilterReportItem_Closure)
                 (const FilterReportItem *message,
                  void *closure_data);
typedef void (*FilterReport_Closure)
                 (const FilterReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    data_op__descriptor;
extern const ProtobufCMessageDescriptor business_request__descriptor;
extern const ProtobufCMessageDescriptor transparent302_target__descriptor;
extern const ProtobufCMessageDescriptor target__descriptor;
extern const ProtobufCMessageDescriptor rule__descriptor;
extern const ProtobufCMessageDescriptor rpt_rule__descriptor;
extern const ProtobufCMessageDescriptor filter_query__descriptor;
extern const ProtobufCMessageDescriptor filter_ret__descriptor;
extern const ProtobufCMessageDescriptor report_query__descriptor;
extern const ProtobufCMessageDescriptor host_rule__descriptor;
extern const ProtobufCMessageDescriptor business_target__descriptor;
extern const ProtobufCMessageDescriptor business_cfg__descriptor;
extern const ProtobufCMessageDescriptor update_info__descriptor;
extern const ProtobufCMessageDescriptor task_info__descriptor;
extern const ProtobufCMessageDescriptor blog_info__descriptor;
extern const ProtobufCMessageDescriptor hart_beat_item__descriptor;
extern const ProtobufCMessageDescriptor hart_beat_config__descriptor;
extern const ProtobufCMessageDescriptor update_config__descriptor;
extern const ProtobufCMessageDescriptor business_response__descriptor;
extern const ProtobufCMessageDescriptor report_data__descriptor;
extern const ProtobufCMessageDescriptor table_active__descriptor;
extern const ProtobufCMessageDescriptor table_crash__descriptor;
extern const ProtobufCMessageDescriptor table_target_hit__descriptor;
extern const ProtobufCMessageDescriptor table_rpt_hit__descriptor;
extern const ProtobufCMessageDescriptor table_adfilter_watch__descriptor;
extern const ProtobufCMessageDescriptor table_client_find__descriptor;
extern const ProtobufCMessageDescriptor table_ua_find__descriptor;
extern const ProtobufCMessageDescriptor table_wifi_find__descriptor;
extern const ProtobufCMessageDescriptor table_ios_work__descriptor;
extern const ProtobufCMessageDescriptor filter_report_item__descriptor;
extern const ProtobufCMessageDescriptor filter_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_business_2eproto__INCLUDED */
